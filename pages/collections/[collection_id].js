import React, { useState } from "react";
import axios, { AxiosError, AxiosInstance, AxiosRequestConfig } from "axios";
import Head from "next/head";

export async function getStaticPaths() {
  const result = await axios.get(`http://localhost:9000/store/products`);
  console.log("resultcol---->", result);
  const productTypId = result.data.products;

  /* console.log("productTypId---->||", productTypId); */

  const typeIdProducts = productTypId?.filter((product) => {
    return product.type_id === "ptyp_01GARH97RYR7P6150DWYS344Q0";
  });
  const typeIdProduct = [typeIdProducts[0]].map((product) => {
    return { typeId: product.type.id, title: product.type.value };
  });
  console.log("collection_id_typeIds--col", typeIdProduct);
  console.log("typeIds--col", typeIdProduct);
  let filterProduct = [];
  if (productTypId && productTypId.length > 0) {
    filterProduct = productTypId.filter((data) => data.collection_id);
  }
  console.log("collection--filterProduct", filterProduct);

  let collData = [];
  if (filterProduct && filterProduct.length > 0) {
    console.log("caterody--->context--filterProduct", filterProduct);
    collData = filterProduct.reduce((acc, curr, index, array) => {
      console.log("curr", curr);
      const x = acc.find((item) => item.parent === curr.collection.title);
      if (!x) {
        return acc.concat({
          icon: curr.thumbnail,
          collection_id: curr.collection_id,
          parent: curr.collection.title,
          children: array.reduce((accumulator, e) => {
            const y = accumulator.find((item) => item.title === e.type.value);
            if (!y && curr.collection.title === e.collection.title) {
              console.log("accumulator", accumulator);
              return accumulator.concat({
                title: e.type.value,
                type_id: e.type.id,
              });
            } else {
              return accumulator;
            }
          }, []),
        });
      } else {
        return acc;
      }
    }, []);
  }

  console.log("collDataaa--->", collData);
  const collectionsPro = collData.map((i) => {
    return { params: { collection_id: i.collection_id.toString() } };
  });

  console.log("result productData---->", collectionsPro);
  return {
    paths: collectionsPro,
    fallback: false, // can also be true or 'blocking'
  };
}

export async function getStaticProps({ params }) {
  const allProducts = await fetch(`http://localhost:9000/store/products`);
  const allProductDatajsn = await allProducts.json();
  console.log("allProducts compo", allProductDatajsn);

  let filterProduct = allProductDatajsn?.products?.filter(
    (product) => product.collection_id === params.collection_id
  );

  console.log("allProducts", filterProduct);

  /* let filterProduct = allProducts?.filter(
    (product) => product.collection_id === params.collection_id
  ); */
  /* 
  console.log("filterProductProducts---->", filterProduct);
 */
  /* const getId = productTypId.filter((i) => {
    return { params: { collection_id: i.collection_id.toString() } };
  }); */

  /* const getId =allProducts.filter((data) => data.collection_id); */
  /*  console.log("id-getstaticprops product---->", allProducts); */
  /* console.log("id-getstaticprops product coll---->", getId);
   */
  return {
    props: {
      result: filterProduct,
    }, // will be passed to the page component as props
  };
}

export default function DisplayProduct(props) {
  const [coll, setColl] = useState(props.result[0]);
  console.log("props---->ssss", props);

  console.log("dataaassss in product", coll);

  /* const getData = async () => {
    const dataaaaaa = await fetch(`http://localhost:9000/store/products`);
   
  };

  getData(); */

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <link
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
          crossorigin="anonymous"
        ></link>
        <script
          src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"
          integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p"
          crossorigin="anonymous"
        ></script>
        <script
          src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"
          integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF"
          crossorigin="anonymous"
        ></script>
        <link rel="preconnect" href="https://fonts.googleapis.com"></link>
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossorigin
        ></link>
        <link
          href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500;600;700;800&family=Oswald&display=swap"
          rel="stylesheet"
        ></link>
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
        ></link>
      </Head>

      <div>
        <h1>hey</h1>
       {/*  {coll.length > 0 &&
          coll.map((collect) => <span>{collect.description}</span>)} */}
          <span>{coll.description}</span>
      </div>
    </>
  );
}
